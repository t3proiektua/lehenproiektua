package dambi.atzipenekoak;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.json.JsonStructure;
import javax.json.JsonWriter;
public class Jsona {
    public String strFileIn;
    public String strFileOut;

    /**
     * Konstruktorea. Parametro bakarra jasotzen badu,
     * sarrera fitxategiaren izena jaso dugula suposatuko da.
     */
    public Jsona(String strFile) {
        strFileIn = strFile;
    }
    /**
     * Konstruktorea. Aldiz, bi parametro jasotzen badira, suposatuko da 
     * lehenengoa sarrera fitxategiaren izena izango dela eta bigarrena 
     * irteerako fitxategiarena.
     */
    public Jsona(String strFileIn, String strFileOut) {
        this.strFileIn = strFileIn;
        this.strFileOut = strFileOut;
    }
    /**
    * Funtzioa. Objektuen fitxategia JSON formatuan irakurriko duen funtzioa. Bukaeran
    * irakurritako objektuen zerrenda itzuliko du.
    */
    public Mendiak irakurri() {
        Mendiak mendiak = null;
        try {
            JsonReader reader = Json.createReader(new FileReader(strFileIn));
            JsonStructure jsonst = reader.read();
            JsonArray jsonarray = jsonst.asJsonArray();
            mendiak = new Mendiak();
            for (int i = 0; i < jsonarray.size(); i++) {
                JsonObject jsonobj = jsonarray.getJsonObject(i);
                Mendia mendia = new Mendia();
                mendia.setId(jsonobj.getInt("id"));
                mendia.setMendia(jsonobj.getString("mendia"));
                mendia.setAltuera(jsonobj.getInt("altuera"));
                mendia.setProbintzia(jsonobj.getString("probintzia"));
                mendiak.add(mendia);
            }
            
        } catch (Exception e) {
            System.out.println("Arazoak " + strFileIn + " fitxategia irakurtzerakoan.");
        }
        return mendiak;
    }
    /**
     * Funtzioa. Objektuen fitxategia JSON formatuan idatziko duen funtzioa. Bukaeran idatzi
     * dituen objektuen kopurua itzuliko du.
     */
    public int idatzi(Mendiak mendiak) {
        int mendiKopurua = 0;
        JsonArray model = null;
        JsonArrayBuilder jab = Json.createArrayBuilder();
        for (Mendia m : mendiak.getMendiak()) {
            jab.add(Json.createObjectBuilder()
                    .add("id", m.getId())
                    .add("mendia", m.getMendia())
                    .add("altuera", m.getAltuera())
                    .add("probintzia", m.getProbintzia())
                    .build());
            mendiKopurua++;
        }
        model=jab.build();

        try (JsonWriter jsonWriter = Json.createWriter(new FileOutputStream(strFileOut))) {
            jsonWriter.writeArray(model);
        } catch (FileNotFoundException fnfe) {
            System.out.println("Fitxategia sortzerakoan arazoak.");
        }
        return mendiKopurua;

    }
}































package dambi.atzipenekoak;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
public class Csva {
    public String strFileIn;
    public String strFileOut;

    /**
     * Konstruktorea. Parametro bakarra jasotzen badu,
     * sarrera fitxategiaren izena jaso dugula suposatuko da.
     */
    public Csva(String strFile) {
        strFileIn = strFile;
    }
    /**
     * Konstruktorea. Aldiz, bi parametro jasotzen badira, suposatuko da 
     * lehenengoa sarrera fitxategiaren izena izango dela eta bigarrena 
     * irteerako fitxategiarena.
     */
    public Csva(String strFileIn, String strFileOut) {
        this.strFileIn = strFileIn;
        this.strFileOut = strFileOut;
    }
    /**
    * Funtzioa. Objektuen fitxategia CSV formatuan irakurriko duen funtzioa. Bukaeran
    * irakurritako objektuen zerrenda itzuliko du.
    */
    public Mendiak irakurri() {
        Mendiak mendiak = null;

        try (BufferedReader inputStream = new BufferedReader(new FileReader(strFileIn))) {
            String banatzailea = ";";
            String l;
            mendiak = new Mendiak();
            while ((l = inputStream.readLine()) != null) {
                String[] eremuak = l.split(banatzailea);
                if (!eremuak[0].equals("MENDIA")) {
                    Mendia mendia = new Mendia();
                    mendia.setId(mendiak.getMendiak() == null ? 0 : mendiak.getMendiak().size());
                    mendia.setMendia(eremuak[0]);
                    mendia.setAltuera(Integer.parseInt(eremuak[1]));
                    mendia.setProbintzia(eremuak[2]);
                    mendiak.add(mendia);
                }
            }
            // System.out.println(mendiak.getMendiak());
        } catch (FileNotFoundException e) {
            System.out.println("Ez da " + strFileIn + " fitxategia aurkitu.");

        } catch (IOException e) {
            System.out.println("IOsalbuespena gertatu da.");
        }
        return mendiak;
    }
    /**
     * Funtzioa. Objektuen fitxategia CSV formatuan idatziko duen funtzioa. Bukaeran idatzi
     * dituen objektuen kopurua itzuliko du.
     */
    public int idatzi(Mendiak mendiak) {
        int mendiKopurua=0;        

        try (PrintWriter outputStream = new PrintWriter(new FileWriter(strFileOut))) {
            for (Mendia m : mendiak.getMendiak()) {
                if (mendiKopurua==0){
                    outputStream.println("MENDIA;ALTUERA;PROBINTZIA");
                }
                mendiKopurua++;
                
                outputStream.println(m.getMendia()+";"+m.getAltuera()+";"+m.getProbintzia());
            }
        } catch (IOException e) {
            System.out.println(strFileOut + " fitxategiarekin arazoren bat egon da.");
        }
        return mendiKopurua;
    }
}
























































package dambi.atzipenekoak;
import java.io.File;

import dambi.pojoak.Mendiak;
import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.Marshaller;
import jakarta.xml.bind.Unmarshaller;

public class Xmla {
    public String strFileIn;
    public String strFileOut;

    /**
     * Konstruktorea. Parametro bakarra jasotzen badu,
     * sarrera fitxategiaren izena jaso dugula suposatuko da.
     */
    public Xmla(String strFile) {
        strFileIn = strFile;
    }
    /**
     * Konstruktorea. Aldiz, bi parametro jasotzen badira, suposatuko da 
     * lehenengoa sarrera fitxategiaren izena izango dela eta bigarrena 
     * irteerako fitxategiarena.
     */
    public Xmla(String strFileIn, String strFileOut) {
        this.strFileIn = strFileIn;
        this.strFileOut = strFileOut;
    }
    /**
     * Funtzioa. Objektuen fitxategia XML formatuan irakurriko duen funtzioa. Bukaeran
     * irakurritako objektuen zerrenda itzuliko du.
     */
    public Mendiak irakurri() { 
        Mendiak mendiak = null;
        try {
            JAXBContext jaxbContext = JAXBContext.newInstance(Mendiak.class);

            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
            mendiak = (Mendiak) jaxbUnmarshaller.unmarshal(new File(strFileIn));
        } catch (Exception ex) {
            System.out.println("Arazoren bat " + strFileIn + " irakurtzerakoan.");
        }
        return mendiak;
    }
    /**
     * Funtzioa. Objektuen fitxategia XML formatuan idatziko duen funtzioa. Bukaeran idatzi
     * dituen objektuen kopurua itzuliko du.
     */
    public int idatzi(Mendiak mendiak) {
        int mendiKopurua = 0;
        try {

            /* init jaxb marshaler */
            JAXBContext jaxbContext = JAXBContext.newInstance(Mendiak.class);
            Marshaller jaxbMarshaller = jaxbContext.createMarshaller();

            /* set this flag to true to format the output */
            jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

            /* marshaling of java objects in xml (output to file and standard output) */
            jaxbMarshaller.marshal(mendiak, new File(strFileOut));
            // jaxbMarshaller.marshal(mendiak, System.out);
            mendiKopurua = mendiak.getMendiak().size();
        } catch (JAXBException e) {
            e.printStackTrace();
        }
        return mendiKopurua;
    }
}
















